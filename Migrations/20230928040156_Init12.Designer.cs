// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Play.Data;

#nullable disable

namespace Play.Migrations
{
    [DbContext(typeof(RentDbContext))]
    [Migration("20230928040156_Init12")]
    partial class Init12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Play.Models.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AddressId"));

                    b.Property<string>("ArenaAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ArenaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Play.Models.Arena", b =>
                {
                    b.Property<long>("ArenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ArenaId"));

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("ArenaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateofAdded")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint");

                    b.HasKey("ArenaId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Arenas");
                });

            modelBuilder.Entity("Play.Models.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BookingId"));

                    b.Property<long>("ArenaId")
                        .HasColumnType("bigint");

                    b.Property<bool>("BookedStatus")
                        .HasColumnType("boolean");

                    b.Property<long>("BookingCartTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBooked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("SubTotal")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("BookingId");

                    b.HasIndex("ArenaId");

                    b.HasIndex("BookingCartTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Play.Models.BookingCartType", b =>
                {
                    b.Property<long>("BookingCartTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BookingCartTypeId"));

                    b.Property<string>("BookingCartTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BookingCartTypeId");

                    b.HasIndex("BookingCartTypeName")
                        .IsUnique();

                    b.ToTable("BookingCartTypes");
                });

            modelBuilder.Entity("Play.Models.BookingCourt", b =>
                {
                    b.Property<long>("BookingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BookingCartId"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("DateToplay")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("FromTime")
                        .HasColumnType("time without time zone");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("ToTime")
                        .HasColumnType("time without time zone");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision");

                    b.HasKey("BookingCartId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ItemId");

                    b.ToTable("BookingCourts");
                });

            modelBuilder.Entity("Play.Models.BookingSportskit", b =>
                {
                    b.Property<long>("BookingSportskitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("BookingSportskitId"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("DateToplay")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("FromTime")
                        .HasColumnType("time without time zone");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("ToTime")
                        .HasColumnType("time without time zone");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("double precision");

                    b.HasKey("BookingSportskitId");

                    b.HasIndex("BookingId");

                    b.HasIndex("ItemId");

                    b.ToTable("BookingSportskits");
                });

            modelBuilder.Entity("Play.Models.CourtDetails", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ItemId"));

                    b.Property<long>("ArenaId")
                        .HasColumnType("bigint");

                    b.Property<string>("CourtDiscription")
                        .HasColumnType("text");

                    b.Property<string>("CourtName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("ItemId");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameId");

                    b.ToTable("CourtDetails");
                });

            modelBuilder.Entity("Play.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("EmployeeId"));

                    b.Property<long>("ArenaId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("DateofJoined")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ArenaId")
                        .IsUnique();

                    b.HasIndex("UserName", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Play.Models.Game", b =>
                {
                    b.Property<long>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GameId"));

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GameId");

                    b.HasIndex("GameName")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Play.Models.Owner", b =>
                {
                    b.Property<long>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("OwnerId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OwnerId");

                    b.HasIndex("UserName", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Play.Models.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PaymentId"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("boolean");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Play.Models.PersonToPlay", b =>
                {
                    b.Property<long>("PersonToId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PersonToId"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("Person_Name")
                        .HasColumnType("text");

                    b.HasKey("PersonToId");

                    b.HasIndex("BookingId");

                    b.ToTable("PersonToPlays");
                });

            modelBuilder.Entity("Play.Models.Ratings", b =>
                {
                    b.Property<long>("RatingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("RatingsId"));

                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<string>("FeedBacK")
                        .HasColumnType("text");

                    b.Property<int>("RatingStar")
                        .HasColumnType("integer");

                    b.HasKey("RatingsId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Play.Models.SportsKit", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ItemId"));

                    b.Property<long>("ArenaId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("PricePerHour")
                        .HasColumnType("double precision");

                    b.Property<string>("SportsKitDescription")
                        .HasColumnType("text");

                    b.HasKey("ItemId");

                    b.HasIndex("ArenaId");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("SportsKits");
                });

            modelBuilder.Entity("Play.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("UserName", "PhoneNumber")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Play.Models.Arena", b =>
                {
                    b.HasOne("Play.Models.Address", "Address")
                        .WithOne("Arena")
                        .HasForeignKey("Play.Models.Arena", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.Owner", "Owner")
                        .WithMany("Arenas")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Play.Models.Booking", b =>
                {
                    b.HasOne("Play.Models.Arena", "Arena")
                        .WithMany("Bookings")
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.BookingCartType", "BookingCartType")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingCartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arena");

                    b.Navigation("BookingCartType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Play.Models.BookingCourt", b =>
                {
                    b.HasOne("Play.Models.Booking", "Booking")
                        .WithMany("BookingCarts")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.CourtDetails", "CourtDetails")
                        .WithMany("BookingCourts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("CourtDetails");
                });

            modelBuilder.Entity("Play.Models.BookingSportskit", b =>
                {
                    b.HasOne("Play.Models.Booking", "Booking")
                        .WithMany("BookingSportskits")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.SportsKit", "SportsKit")
                        .WithMany("BookingSportskits")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("SportsKit");
                });

            modelBuilder.Entity("Play.Models.CourtDetails", b =>
                {
                    b.HasOne("Play.Models.Arena", "Arena")
                        .WithMany("CourtDetails")
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.Game", "Game")
                        .WithMany("CourtDetails")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arena");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Play.Models.Employee", b =>
                {
                    b.HasOne("Play.Models.Arena", "Arena")
                        .WithOne("Employee")
                        .HasForeignKey("Play.Models.Employee", "ArenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arena");
                });

            modelBuilder.Entity("Play.Models.Payment", b =>
                {
                    b.HasOne("Play.Models.Booking", "Booking")
                        .WithOne("Payment")
                        .HasForeignKey("Play.Models.Payment", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Play.Models.PersonToPlay", b =>
                {
                    b.HasOne("Play.Models.Booking", null)
                        .WithMany("PersonToPlays")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Play.Models.Ratings", b =>
                {
                    b.HasOne("Play.Models.Booking", "Booking")
                        .WithOne("Ratings")
                        .HasForeignKey("Play.Models.Ratings", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Play.Models.SportsKit", b =>
                {
                    b.HasOne("Play.Models.Arena", "Arena")
                        .WithMany("SportsKits")
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Play.Models.Game", "Game")
                        .WithOne("SportsKit")
                        .HasForeignKey("Play.Models.SportsKit", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arena");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Play.Models.Address", b =>
                {
                    b.Navigation("Arena");
                });

            modelBuilder.Entity("Play.Models.Arena", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CourtDetails");

                    b.Navigation("Employee");

                    b.Navigation("SportsKits");
                });

            modelBuilder.Entity("Play.Models.Booking", b =>
                {
                    b.Navigation("BookingCarts");

                    b.Navigation("BookingSportskits");

                    b.Navigation("Payment");

                    b.Navigation("PersonToPlays");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Play.Models.BookingCartType", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Play.Models.CourtDetails", b =>
                {
                    b.Navigation("BookingCourts");
                });

            modelBuilder.Entity("Play.Models.Game", b =>
                {
                    b.Navigation("CourtDetails");

                    b.Navigation("SportsKit");
                });

            modelBuilder.Entity("Play.Models.Owner", b =>
                {
                    b.Navigation("Arenas");
                });

            modelBuilder.Entity("Play.Models.SportsKit", b =>
                {
                    b.Navigation("BookingSportskits");
                });

            modelBuilder.Entity("Play.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
